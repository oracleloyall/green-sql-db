#!/bin/sh -e

# This file was originally adopted from mydns package.
# January 26, 2008, Yuli


###############################
## PgSQL Authentication Type ##
###############################

data_dir=`ps ax | grep "postgres" | grep "\-D" | grep -iv grep | perl -e 'if (<STDIN> =~ m/\-D\s*(.*?)\s/) {print $1;}'` || true
if [ ! -z "$data_dir" ]; then
  pgsql_conf=`ps ax | grep "postgres" | grep "\-D" | grep -iv grep | perl -e 'if (<STDIN> =~ m/config_file\s*=\s*(.*?)\s/) {print $1}'` || true

  if [ -z $pgsql_conf ]; then
    pgsql_conf="${data_dir}/postgresql.conf"
  fi

  ## get hba_file from configuration file
  if [ -f "$pgsql_conf" ]; then
    hba_file=`grep -E "^\s*hba_file" $pgsql_conf` || true
    if [ ! -z "$hba_file" ]; then
      hba_file=`echo $hba_file | tr -d "'"` || true
      hba_file=`echo $hba_file | perl -e 'if (<STDIN> =~ m/hba_file\s*=\s*(.*?)\s/) { print $1;}'` || true
    else
      ## couldnt find hba_file directive in configuration so try the data dir
      hba_file="${data_dir}/pg_hba.conf"
    fi

    if [ ! -f $hba_file ]; then
      echo "file doesnt exist: $hba_file"
    elif [ ! -r $hba_file ]; then
      echo "failed to read file: $hba_file"
    fi

    rule=`grep -E "^\W*local\W*all\W*all\W*ident" $hba_file` || true
    if [ ! -z "$rule" ]; then
      authtype="ident"
    else
      rule=`grep -E "^\W*local\W*all\W*all\W*md5" $hba_file` || true
      if [ ! -z "$rule" ]; then
      authtype="md5"
      fi
    fi
  fi
fi

#####################
## Debian Package ###
#####################
# Source debconf library.
. /usr/share/debconf/confmodule

db_version 2.0
db_capb backup

STATE=1

# Break on 0 (exit_failure) and 11 (exit_success).
while [ "$STATE" != 0 -a "$STATE" != 11 ]
do
  case "$STATE" in
  1)
    STATE=2
  ;;
  2)
    db_input critical greensql/sql_choice || true
    if db_go
    then
      db_get greensql/sql_choice || true
      if [ "$RET" = "mysql" ] || [ "$RET" = "postgresql" ]; then 
        if [ "$RET" = "mysql" ]; then
          STATE=3
        elif [ "$RET" = "postgresql" ]; then
          STATE=5
        else
          STATE=2
        fi
      else
	STATE=0
      fi
    else
      STATE=0
    fi
  ;;
  3)
    db_input critical greensql/mysql_server || true
    if db_go
    then
      db_get greensql/mysql_server || true
      if [ ! -z "$RET" ]; then
        STATE=31
      else
        STATE=3
      fi
    else
      STATE=2
    fi
  ;;
  31)
    db_input critical greensql/mysql_port || true
    db_get greensql/mysql_port || true
    if db_go
    then 
      if [ ! -z "$RET" ]; then
          STATE=4
      else
          STATE=31
      fi
    else
      STATE=3
    fi
  ;;
  4)
    db_input critical greensql/mysql_root_user || true
    if db_go
    then
      db_get greensql/mysql_root_user || true
      if [ ! -z "$RET" ]; then 
        STATE=41
      else
        STATE=4
      fi
    else
      STATE=3
    fi
  ;;
  41)
    db_input critical greensql/mysql_root_passwd || true
    if db_go
    then
      db_get greensql/mysql_root_passwd || true

      # Empty root passwords are not allowed - this would be highly insecure anyway.
      if [ ! -z "$RET" ]; then 
        STATE=411 
      else  
        STATE=41
      fi
    else
      STATE=4
    fi
  ;;
  411)
    db_input critical greensql/confirm || true
    if db_go
    then
      db_get greensql/confirm || true
      CONFIRM="$RET"
      db_get greensql/mysql_root_passwd || true
      if [ "$RET" != "$CONFIRM" ]; then
        # Reset both fields
        db_fset greensql/mysql_root_passwd seen false
        db_fset greensql/confirm seen false
        STATE=4111
      else
        STATE=7
      fi
    else
      STATE=41
    fi
  ;;
  4111)
    db_input critical greensql/mismatch || true
    db_go
    STATE=4
  ;;
  5)
    db_input critical greensql/postgres_location || true
    if db_go
    then
      db_get greensql/postgres_location || true
      if [ "$RET" = "local" ]; then
        if [ "$authtype" = "ident" ]; then
          db_set greensql/postgres_auth "ident" || true
          STATE=7
        elif [ "$authtype" = "md5" ]; then
          db_set greensql/postgres_auth "md5" || true
          STATE=6
        else
          STATE=51
        fi
      elif [ "$RET" = "remote" ]; then
        STATE=52
      else
        STATE=5
      fi
    else
      STATE=2
    fi
  ;;
  51)
    db_input critical greensql/postgres_auth || true
    if db_go
    then
      db_get greensql/postgres_auth || true
      if [ "$RET" = "ident" ]; then
        STATE=7
      elif [ "$RET" = "md5" ]; then
        STATE=6
      else
        STATE=51
      fi
    else
      STATE=5
    fi
  ;;
  52)
    db_input critical greensql/postgres_server || true
    if db_go
    then
      db_get greensql/postgres_server || true
      if [ ! -z "$RET" ]; then
        STATE=53
      else
        STATE=52
      fi
    else
      STATE=5
    fi
  ;;
  53)
    db_input critical greensql/postgres_port || true
    if db_go
    then
      db_get greensql/postgres_port || true
      if [ ! -z "$RET" ]; then
          STATE=6
      else
          STATE=53
      fi
    else
      STATE=5
    fi
  ;;
  6)
    db_input critical greensql/postgres_root_user || true
    if db_go
    then
      db_get greensql/postgres_root_user || true
      if [ ! -z "$RET" ]; then
        STATE=61
      else  
        STATE=6
      fi
    else
      STATE=5
    fi
  ;;
  61)
    db_input critical greensql/postgres_root_passwd || true
    if db_go
    then
      db_get greensql/postgres_root_passwd || true
      # Empty root passwords are not allowed - this would be highly insecure anyway.
      if [ ! -z "$RET" ]; then 
        STATE=611
      else 
        STATE=61
      fi
    else
      STATE=6
    fi
  ;;
  611)
    db_input critical greensql/confirm || true
    if db_go
    then
      db_get greensql/confirm || true
      CONFIRM="$RET"
      db_get greensql/postgres_root_passwd || true
      if [ "$RET" != "$CONFIRM" ]; then
        # Reset both fields
        db_fset greensql/postgres_root_passwd seen false
        db_fset greensql/confirm seen false
        STATE=6111
      else
        STATE=7
      fi
    else
      STATE=6
    fi
  ;;
  6111)
    db_input critical greensql/mismatch || true
    db_go
    STATE=6
  ;;
  7)
    db_input critical greensql/database || true
    if db_go
    then
      db_get greensql/database || true
      if [ ! -z "$RET" ]; then STATE=8; fi
    else
      STATE=2
    fi
  ;;
  8)
    db_input critical greensql/setup || true
    if db_go
    then
      db_get greensql/setup || true
      if [ "$RET" = "false" ]; then
        STATE=11
      elif [ "$RET" = "true" ]; then
        STATE=9
      else
        STATE=9
      fi
    else
      STATE=9
    fi
  ;;
  9)
    db_input critical greensql/user || true
    if db_go
    then
      db_get greensql/user || true
      if [ ! -z "$RET" ]; then STATE=10; fi
    else
      STATE=2
    fi
  ;;
  10)
    db_input critical greensql/passwd || true
    if db_go
    then
      db_get greensql/passwd || true
      if [ -z "$RET" ]; then
        db_set greensql/passwd "pwd"
      fi
      STATE=11
    else
      STATE=9
    fi
  ;;
  esac
done

# 0 is exit_failure
if [ "$STATE" = 0 ]; then exit 1; fi

# vim:set et ts=2:
